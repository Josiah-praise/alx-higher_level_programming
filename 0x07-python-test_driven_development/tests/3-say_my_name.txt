==============================
How use 3-say_my_name function
==============================

=====
Usage
=====

Import the function:

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Test for Success Cases:

    >>> say_my_name("John", "Smith")
    My name is John Smith
    
    >>> say_my_name("Bob")
    My name is Bob 

Test Error Cases:

    >>> import sys
    >>> def errorMesage(input_wrong):
    ...     """Return an exception if is raised"""
    ...     try:
    ...             if len(input_wrong) == 2:
    ...                     return say_my_name(input_wrong[0], input_wrong[1])
    ...             else:
    ...                     return say_my_name(input_wrong[0])
    ...     except:
    ...             return str(sys.exc_info()[1])
    ...
    >>>

    >>> def identifyError(error):
    ...     """Identify a custum error and return its number identifier"""
    ...     if error == str(TypeError("first_name must be a string")):
    ...             return 1
    ...     elif error == str(TypeError("last_name must be a string")):
    ...             return 2
    ...     else:
    ...             return 0
    ...
    >>>

    >>> e1 = [[3, "LÃ³pez"], [None, 9], [9, 8]]
    >>> e2 = [["Jaime", None], ["Javier", True]]
    >>> error_cases = e1 + e2

    >>> l_errors = [errorMesage(l) for l in error_cases]
    >>> [identifyError(e) for e in l_errors]
    [1, 1, 1, 2, 2]

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

    